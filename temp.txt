// separator
                        for (uint k = 0; k < (0.000572 * format.dwSamplesPerSec * format.wChannels) - 1; k++)
                        {
                            // Fill with a simple sine wave at max amplitude
                            for (int channel = 0; channel < format.wChannels; channel++)
                            {
                                data.shortArray[i + format.wChannels] = Convert.ToInt16(amplitude * Math.Sin(separatorAngle * k));
                            }
                            i++;
                        }
                        // green
                        for (int k = 0; k < pixelPerLine; k++)
                        {
                            for (int channel = 0; channel < format.wChannels; channel++)
                            {
                                data.shortArray[i + channel] = Convert.ToInt16(amplitude * p.s(j, 0.26f * deviation, deviation));
                                i++;
                            }
                        }
                        // separator
                        for (uint k = 0; k < (0.000572 * format.dwSamplesPerSec * format.wChannels) - 1; k++)
                        {
                            // Fill with a simple sine wave at max amplitude
                            for (int channel = 0; channel < format.wChannels; channel++)
                            {
                                data.shortArray[i + format.wChannels] = Convert.ToInt16(amplitude * Math.Sin(separatorAngle * k));
                            }
                            i++;
                        }

                        // blue
                        for (int k = 0; k < pixelPerLine; k++)
                        {
                            for (int channel = 0; channel < format.wChannels; channel++)
                            {
                                data.shortArray[i + channel] = Convert.ToInt16(amplitude * p.s(j, 0.26f * deviation, deviation));
                                i++;
                            }
                        }
                        // separator
                        for (uint k = 0; k < (0.000572 * format.dwSamplesPerSec * format.wChannels) - 1; k++)
                        {
                            // Fill with a simple sine wave at max amplitude
                            for (int channel = 0; channel < format.wChannels; channel++)
                            {
                                data.shortArray[i + format.wChannels] = Convert.ToInt16(amplitude * Math.Sin(separatorAngle * k));
                            }
                            i++;
                        }
                        // red
                        for (int k = 0; k < pixelPerLine; k++)
                        {
                            for (int channel = 0; channel < format.wChannels; channel++)
                            {
                                data.shortArray[i + channel] = Convert.ToInt16(amplitude * p.s(j, 0.26f * deviation, deviation));
                                i++;
                            }
                        }
                        // separator
                        for (uint k = 0; k < (0.000572 * format.dwSamplesPerSec * format.wChannels) - 1; k++)
                        {
                            // Fill with a simple sine wave at max amplitude
                            for (int channel = 0; channel < format.wChannels; channel++)
                            {
                                data.shortArray[i + format.wChannels] = Convert.ToInt16(amplitude * Math.Sin(separatorAngle * k));
                            }
                            i++;
                        }